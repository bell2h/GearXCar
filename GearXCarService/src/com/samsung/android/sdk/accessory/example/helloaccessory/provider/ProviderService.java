/* * Copyright (c) 2015 Samsung Electronics Co., Ltd. All rights reserved.  * Redistribution and use in source and binary forms, with or without modification, are permitted provided that  * the following conditions are met: *  *     * Redistributions of source code must retain the above copyright notice,  *       this list of conditions and the following disclaimer.  *     * Redistributions in binary form must reproduce the above copyright notice,  *       this list of conditions and the following disclaimer in the documentation and/or  *       other materials provided with the distribution.  *     * Neither the name of Samsung Electronics Co., Ltd. nor the names of its contributors may be used to endorse *       or promote products derived from this software without specific prior written permission. *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE * POSSIBILITY OF SUCH DAMAGE. */package com.samsung.android.sdk.accessory.example.helloaccessory.provider;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.GregorianCalendar;import android.content.Context;import android.content.Intent;import android.media.MediaPlayer;import android.os.Binder;import android.os.Handler;import android.os.IBinder;import android.widget.Toast;import android.util.Log;import com.samsung.android.sdk.SsdkUnsupportedException;import com.samsung.android.sdk.accessory.*;public class ProviderService extends SAAgent {    private static final String TAG = "GearXCarService";        public static String ACTION_GEAR_EVENT = "com.gearxcar.action.EVENT";    public static String ACTION_GEAR_HOME = "com.gearxcar.action.HOME";        public static String GEAR_EVENT_ROTARYDETENT_CW = "com.gearxcar.event.rotarydetent.cw";    public static String GEAR_EVENT_ROTARYDETENT_CCW = "com.gearxcar.event.rotarydetent.ccw";    public static String GEAR_EVENT_GESTURE_LEFT = "com.gearxcar.event.gesture.left";    public static String GEAR_EVENT_GESTURE_RIGHT = "com.gearxcar.event.gesture.right";    public static String GEAR_EVENT_GESTURE_DOWN = "com.gearxcar.event.gesture.down";    public static String GEAR_EVENT_GESTURE_UP = "com.gearxcar.event.gesture.up";    public static String GEAR_EVENT_GESTURE_TAP = "com.gearxcar.event.gesture.tap";    public static String GEAR_EVENT_GESTURE_LONGPRESS = "com.gearxcar.event.gesture.longpress";    public static String GEAR_EVENT_UNKNOWN = "com.gearxcar.event.unknown";        public static String GEAR_CMD_ROTARYDETENT_CW = "rotarydetent_cw";    public static String GEAR_CMD_ROTARYDETENT_CCW = "rotarydetent_ccw";    public static String GEAR_CMD_GESTURE_LEFT = "gesture_left";    public static String GEAR_CMD_GESTURE_RIGHT = "gesture_right";    public static String GEAR_CMD_GESTURE_DOWN = "gesture_down";    public static String GEAR_CMD_GESTURE_UP = "gesture_up";    public static String GEAR_CMD_GESTURE_TAP = "gesture_tap";    public static String GEAR_CMD_GESTURE_LONGPRESS = "gesture_longpress";        private static final int HELLOACCESSORY_CHANNEL_ID = 104;    private static final Class<ServiceConnection> SASOCKET_CLASS = ServiceConnection.class;    private final IBinder mBinder = new LocalBinder();    private ServiceConnection mConnectionHandler = null;    Handler mHandler = new Handler();    public ProviderService() {        super(TAG, SASOCKET_CLASS);    }    @Override    public void onCreate() {        super.onCreate();        SA mAccessory = new SA();        try {            mAccessory.initialize(this);        } catch (SsdkUnsupportedException e) {            // try to handle SsdkUnsupportedException            if (processUnsupportedException(e) == true) {                return;            }        } catch (Exception e1) {            e1.printStackTrace();            /*             * Your application can not use Samsung Accessory SDK. Your application should work smoothly             * without using this SDK, or you may want to notify user and close your application gracefully             * (release resources, stop Service threads, close UI thread, etc.)             */            stopSelf();        }    }    @Override    public IBinder onBind(Intent intent) {        return mBinder;    }    @Override    protected void onFindPeerAgentResponse(SAPeerAgent peerAgent, int result) {        Log.d(TAG, "onFindPeerAgentResponse : result =" + result);    }    @Override    protected void onServiceConnectionRequested(SAPeerAgent peerAgent) {        if (peerAgent != null) {            Toast.makeText(getBaseContext(), R.string.ConnectionAcceptedMsg, Toast.LENGTH_SHORT).show();            acceptServiceConnectionRequest(peerAgent);        }    }    @Override    protected void onServiceConnectionResponse(SAPeerAgent peerAgent, SASocket socket, int result) {        if (result == SAAgent.CONNECTION_SUCCESS) {            if (socket != null) {                mConnectionHandler = (ServiceConnection) socket;            }        } else if (result == SAAgent.CONNECTION_ALREADY_EXIST) {            Log.e(TAG, "onServiceConnectionResponse, CONNECTION_ALREADY_EXIST");        }    }    @Override    protected void onAuthenticationResponse(SAPeerAgent peerAgent, SAAuthenticationToken authToken, int error) {        /*         * The authenticatePeerAgent(peerAgent) API may not be working properly depending on the firmware         * version of accessory device. Please refer to another sample application for Security.         */    }    @Override    protected void onError(SAPeerAgent peerAgent, String errorMessage, int errorCode) {        super.onError(peerAgent, errorMessage, errorCode);    }    private boolean processUnsupportedException(SsdkUnsupportedException e) {        e.printStackTrace();        int errType = e.getType();        if (errType == SsdkUnsupportedException.VENDOR_NOT_SUPPORTED                    || errType == SsdkUnsupportedException.DEVICE_NOT_SUPPORTED) {            /*             * Your application can not use Samsung Accessory SDK. You application should work smoothly             * without using this SDK, or you may want to notify user and close your app gracefully (release             * resources, stop Service threads, close UI thread, etc.)             */            stopSelf();        } else if (errType == SsdkUnsupportedException.LIBRARY_NOT_INSTALLED) {            Log.e(TAG, "You need to install Samsung Accessory SDK to use this application.");        } else if (errType == SsdkUnsupportedException.LIBRARY_UPDATE_IS_REQUIRED) {            Log.e(TAG, "You need to update Samsung Accessory SDK to use this application.");        } else if (errType == SsdkUnsupportedException.LIBRARY_UPDATE_IS_RECOMMENDED) {            Log.e(TAG, "We recommend that you update your Samsung Accessory SDK before using this application.");            return false;        }        return true;    }    public class LocalBinder extends Binder {        public ProviderService getService() {            return ProviderService.this;        }    }        //Context mContext = this.getBaseContext();    public class ServiceConnection extends SASocket {        public ServiceConnection() {            super(ServiceConnection.class.getName());        }        @Override        public void onError(int channelId, String errorMessage, int errorCode) {        }        @Override        public void onReceive(int channelId, byte[] data) {            if (mConnectionHandler == null) {                return;            }            handleDataInGearXCar(data);            //handleDataInSample(data);        }                private String getGearEvent(String gearCmd) {            //final MediaPlayer noti = MediaPlayer.create(mContext, R.raw.noti);            //final MediaPlayer volsound = MediaPlayer.create(mContext, R.raw.volsound);                        if (gearCmd.equalsIgnoreCase(GEAR_CMD_ROTARYDETENT_CW)) {                return GEAR_EVENT_ROTARYDETENT_CW;            } else if (gearCmd.equalsIgnoreCase(GEAR_CMD_ROTARYDETENT_CCW)) {                return GEAR_EVENT_ROTARYDETENT_CCW;            } else if (gearCmd.equalsIgnoreCase(GEAR_CMD_GESTURE_LEFT)) {                return GEAR_EVENT_GESTURE_LEFT;            } else if (gearCmd.equalsIgnoreCase(GEAR_CMD_GESTURE_RIGHT)) {                return GEAR_EVENT_GESTURE_RIGHT;            } else if (gearCmd.equalsIgnoreCase(GEAR_CMD_GESTURE_DOWN)) {                return GEAR_EVENT_GESTURE_DOWN;            } else if (gearCmd.equalsIgnoreCase(GEAR_CMD_GESTURE_UP)) {                return GEAR_EVENT_GESTURE_UP;            } else if (gearCmd.equalsIgnoreCase(GEAR_CMD_GESTURE_TAP)) {                //noti.start();                return GEAR_EVENT_GESTURE_TAP;            } else if (gearCmd.equalsIgnoreCase(GEAR_CMD_GESTURE_LONGPRESS)) {                //volsound.start();                Intent intentHome = new Intent(ACTION_GEAR_HOME);                Context context = getApplicationContext();                context.sendBroadcast(intentHome);                return GEAR_EVENT_GESTURE_LONGPRESS;            }            Log.w(TAG, "getGearEvent: GEAR_EVENT_UNKNOWN - " + gearCmd);            return GEAR_EVENT_UNKNOWN;        }                private void handleDataInGearXCar(byte[] data) {            String strGearCmd = new String(data);            Log.d(TAG, "handleDataInGearXCar : " + strGearCmd);            String event = getGearEvent(strGearCmd);            Intent intent = new Intent(ACTION_GEAR_EVENT);            intent.putExtra("event", event);            Log.d(TAG, "handleDataInGearXCar : event=" + event);                        Context context = getApplicationContext();            context.sendBroadcast(intent);        }                private void handleDataInSample(byte[] data) {            Calendar calendar = new GregorianCalendar();            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy.MM.dd aa hh:mm:ss.SSS");            String timeStr = " " + dateFormat.format(calendar.getTime());            String strToUpdateUI = new String(data);            final String message = strToUpdateUI.concat(timeStr);            new Thread(new Runnable() {                public void run() {                    try {                        mConnectionHandler.send(HELLOACCESSORY_CHANNEL_ID, message.getBytes());                    } catch (IOException e) {                        e.printStackTrace();                    }                }            }).start();        }        @Override        protected void onServiceConnectionLost(int reason) {            mConnectionHandler = null;            mHandler.post(new Runnable() {                @Override                public void run() {                    Toast.makeText(getBaseContext(), R.string.ConnectionTerminateddMsg, Toast.LENGTH_SHORT).show();                }            });        }    }}